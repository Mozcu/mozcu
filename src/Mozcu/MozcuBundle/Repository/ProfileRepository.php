<?php

namespace Mozcu\MozcuBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Mozcu\MozcuBundle\Entity\User;

/**
 * ProfileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProfileRepository extends EntityRepository
{
    public function liveSearch($query, $limit = 4) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->from('MozcuMozcuBundle:Profile', 'p')
            ->innerJoin('p.user', 'u')
            ->leftJoin('p.albums', 'a')
            ->where('p.name LIKE :like OR u.username LIKE :like OR a.artist_name LIKE :like')
            ->andWhere('u.status = :status')
            ->setParameters([
                'like' => '%' . $query .'%',
                'status' => User::STATUS_ACTIVE,
            ]);
        
        
        if($limit > 0) {
            $qb->select('p')
                ->addSelect('LOCATE(:term, p.name) position')
                ->orderBy('position', 'DESC')
                ->setParameter('term', $query);
            $query = $qb->getQuery();
            $query->setFirstResult(0)->setMaxResults($limit);
            $results = $query->getResult();
            return array_map(
                function ($result) { return $result[0]; },
                $results
            );
        }
        
        $qb->select('COUNT(p.id)');
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function searchTotalCount($query) {
        return $this->liveSearch($query, 0);
    }
    
    /**
     * 
     * @param string $city
     * @return array
     */
    public function findCitiesByLike($city) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('DISTINCT p.city')
                ->from("MozcuMozcuBundle:profile", "p")
                ->where("p.city LIKE :city")
                ->orderBy('p.city', 'ASC')
                ->setParameter('city', '%' . $city . '%');
        
        $query = $qb->getQuery()
                ->setFirstResult(0)
                ->setMaxResults(10);
        
        return $query->getArrayResult();
    }
}
