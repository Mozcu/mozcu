<?php

namespace Mozcu\MozcuBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Mozcu\MozcuBundle\Entity\Album;

/**
 * SongRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SongRepository extends EntityRepository
{
    public function liveSearch($name, $limit = 4) {
        $dql = "FROM MozcuMozcuBundle:Song s JOIN s.album a
                WHERE (s.name LIKE '%$name%' OR a.artist_name LIKE '%$name%') AND a.status = :status";
        
        if($limit > 0) {
            $dql = "SELECT s " . $dql;
            $query = $this->getEntityManager()->createQuery($dql);
            $query->setFirstResult(0)->setMaxResults($limit);
        } else {
            $dql = "SELECT COUNT(s.id) " . $dql;
            $query = $this->getEntityManager()->createQuery($dql);
            return $query->getSingleScalarResult();
        }
        
        $query->setParameter('status', Album::STATUS_ACTIVE);
        
        return $query->getResult();
    }
    
    public function searchTotalCount($query) {
        return $this->liveSearch($query, 0);
    }
    
    /**
     * 
     * @param \Mozcu\MozcuBundle\Entity\Album $album
     * @return array
     */
    public function getSongIdsFromAlbum(Album $album) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('s.id')
            ->from('MozcuMozcuBundle:Song', 's')
            ->where('s.album = :albumId')
            ->orderBy('s.id', 'ASC')
            ->setParameter('albumId', $album->getId());
        $ids = $qb->getQuery()->getArrayResult();
        
        return array_map(function($row) {
            return $row['id'];
        }, $ids);
    }
}
