<?php

namespace Mozcu\MozcuBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

use Mozcu\MozcuBundle\Entity\Album;
use Mozcu\MozcuBundle\Entity\Profile;
use Mozcu\MozcuBundle\Entity\User;

/**
 * AlbumRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AlbumRepository extends EntityRepository {
    
    public function findAllPaginated($page, $cant, $filters = []) {
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select("a")
            ->from('MozcuMozcuBundle:Album', 'a')
            ->innerJoin('a.profile', 'p')
            ->innerJoin('p.user', 'u')
            ->where('a.status = :status')
            ->setParameter('status', Album::STATUS_ACTIVE)
            ->andWhere('u.status = :userStatus')
            ->setParameter('userStatus', User::STATUS_ACTIVE);
        // order
        $map = false;
        if(isset($filters['orderBy']) && !empty($filters['orderBy'])) {
            $qb->orderBy($filters['orderBy']['sort'], $filters['orderBy']['order']);
        } else {
            $qb->orderBy('a.createdAt', 'DESC');
        }
        // tag
        if(isset($filters['tag']) && !empty($filters['tag'])) {
            $qb->innerJoin('a.tags', 't')
               ->andWhere("t.id = :tag")
               ->setParameter('tag', $filters['tag']);
        }
        // country
        if(isset($filters['country']) && !empty($filters['country'])) {
            $qb->innerJoin('p.country', 'c')
               ->andWhere("c.id = :country")
               ->setParameter('country', $filters['country']);
        }
            
        $query = $qb->getQuery()
                    ->setFirstResult($page * $cant)
                    ->setMaxResults($cant);
        
        if ($map) {
            return array_map(
                function ($result) { return $result[0]; },
                $query->getResult()
            );
        }
        
        return $query->getResult();
    }
    
    public function findByProfile(Profile $profile) {
        $dql  = "SELECT a FROM MozcuMozcuBundle:Album a WHERE a.profile = :profileId ORDER BY a.releaseDate DESC";
        $query = $this->getEntityManager()->createQuery($dql)->setParameter('profileId', $profile->getId());
        return $query->getResult();
    }
    
    public function findByTags(array $tags, $page = 0, $cant = 16) {
        $in = "(" . implode(',', $tags) . ")";
        //$cant = count($tags);
        
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select("a")
            ->from('MozcuMozcuBundle:Album', 'a')
            ->innerJoin('a.tags', 't')
            ->innerJoin('a.profile', 'p')
            ->innerJoin('p.user', 'u')
            ->where("t.id IN {$in} AND a.status = :status")
            ->setParameter('status', Album::STATUS_ACTIVE)
            ->andWhere('u.status = :userStatus')
            ->setParameter('userStatus', User::STATUS_ACTIVE)
            //->groupBy("a.name")
            //->having("COUNT(t.id) = {$cant}")
            ->orderBy('a.id', 'DESC');

        $query = $qb->getQuery();
        $query->setFirstResult($page * $cant)
              ->setMaxResults($cant);
        
        return $query->getResult();
    }
    
    public function liveSearch($name, $limit = 4) {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->from('MozcuMozcuBundle:Album', 'a')
            ->innerJoin('a.profile', 'p')
            ->innerJoin('p.user', 'u')
            ->where('a.name LIKE :like OR a.artist_name LIKE :like')
            ->andWhere('a.status = :status')
            ->setParameters([
                'like' => '%' . $name .'%',
                'status' => Album::STATUS_ACTIVE,
            ])
            ->andWhere('u.status = :userStatus')
            ->setParameter('userStatus', User::STATUS_ACTIVE);
        
        
        if($limit > 0) {
            $qb->select('a')
                ->addSelect('LOCATE(:term, a.name) position')
                ->orderBy('position', 'DESC')
                ->setParameter('term', $name);
            $query = $qb->getQuery();
            $query->setFirstResult(0)->setMaxResults($limit);
            $results = $query->getResult();
            return array_map(
                function ($result) { return $result[0]; },
                $results
            );
        }
        
        $qb->select('COUNT(a.id)');
        return $qb->getQuery()->getSingleScalarResult();
    }
    
    public function searchTotalCount($query) {
        return $this->liveSearch($query, 0);
    }
    
    public function findRelated(Album $album) {
        $tags = array();
        foreach($album->getTags() as $tag) {
            $tags[] = $tag->getId();
        }
        $in = "(" . implode(',', $tags) . ")";
        
        $qb = $this->getEntityManager()->createQueryBuilder()
            ->select("a, COUNT(t.id) as tagsCant")
            ->from('MozcuMozcuBundle:Album', 'a')
            ->innerJoin('a.tags', 't')
            ->innerJoin('a.profile', 'p')
            ->innerJoin('p.user', 'u')
            ->where("t.id IN {$in} AND a.id <> {$album->getId()} AND a.status = :status")
            ->setParameter('status', Album::STATUS_ACTIVE)
            ->andWhere('u.status = :userStatus')
            ->setParameter('userStatus', User::STATUS_ACTIVE)
            ->groupBy('a.id')
            ->orderBy('tagsCant', 'DESC');
        
        $query = $qb->getQuery()
                       ->setFirstResult(0)
                       ->setMaxResults(16);

        $results = $query->getResult();
        
        return array_map(
            function ($result) { return $result[0]; },
            $results
        );
    }
    
    public function findOneByUsernameAndSlug($username, $slug)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('a')
                ->from('MozcuMozcuBundle:Album', 'a')
                ->innerJoin('a.profile', 'p')
                ->innerJoin('p.user', 'u')
                ->where('a.slug = :slug')
                ->andWhere('u.username = :username')
                ->andWhere('a.status = :status')
                ->setParameters(['slug' => $slug, 'username' => $username, 'status' => Album::STATUS_ACTIVE])
                ->andWhere('u.status = :userStatus')
                ->setParameter('userStatus', User::STATUS_ACTIVE);
        try {
            return $qb->getQuery()->getSingleResult();
        } catch(NoResultException $e) {
            return null;
        }
    }
    
    /**
     * TODO: ver que onda esta query, resuelve de una manera rara porque Doctrine
     * 
     * @param Profile $profile
     * @return Collection
     */
    public function findLikedAlbums(Profile $profile)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('a')
                ->from('MozcuMozcuBundle:Album', 'a')
                ->innerJoin('a.likers', 'l')
                ->innerJoin('a.profile', 'p')
                ->innerJoin('p.user', 'u')
                ->where('l.id = :profile')
                ->setParameter('profile', $profile->getId())
                ->andWhere('u.status = :userStatus')
                ->setParameter('userStatus', User::STATUS_ACTIVE)
                ->orderBy('a.name', 'ASC');
        
        return $qb->getQuery()->getResult();
    }
}
